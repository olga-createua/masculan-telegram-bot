# app.py ‚Äî Telegram Shop Bot (Masculan)
# aiogram 3 + FastAPI (webhook), –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ Render

import os
from fastapi import FastAPI, Request, Header, HTTPException
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, Update
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ Render ‚Üí Environment) ===
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "671863992"))  # –≤–∞—à Telegram ID
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")  # –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ª—é–±–æ–π —Å–ª–æ–∂–Ω—ã–π –∫–ª—é—á
BASE_URL = os.getenv("BASE_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-service.onrender.com

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Add it as an environment variable.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = Bot(BOT_TOKEN, parse_mode=None)
dp = Dispatcher()
app = FastAPI(title="Masculan Telegram Bot")

# === –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (–≤–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ + —Ü–µ–Ω—ã) ===
PRODUCTS = [
    {"id":"p1",  "name":"–Ü–Ω—Ç–∏–º–Ω–∏–π –≥–µ–ª—å-–∑–º–∞–∑–∫–∞ Masculan –í–µ–ª—å–≤–µ—Ç 50 –º–ª (4019042050108)",         "price": 318},
    {"id":"p2",  "name":"–Ü–Ω—Ç–∏–º–Ω–∏–π –≥–µ–ª—å-–∑–º–∞–∑–∫–∞ Masculan –í–µ–ª—å–≤–µ—Ç 5x3 –º–ª (4019042003050)",        "price": 102},
    {"id":"p3",  "name":"–Ü–Ω—Ç–∏–º–Ω–∏–π –≥–µ–ª—å-–∑–º–∞–∑–∫–∞ Masculan –ó–µ–ª–µ–Ω–µ —è–±–ª—É–∫–æ 75 –º–ª (4019042700119)",   "price": 408},
    {"id":"p4",  "name":"–Ü–Ω—Ç–∏–º–Ω–∏–π –≥–µ–ª—å-–∑–º–∞–∑–∫–∞ Masculan –ü–æ–ª—É–Ω–∏—Ü—è 75 –º–ª (4019042075026)",        "price": 408},
    {"id":"p5",  "name":"–Ü–Ω—Ç–∏–º–Ω–∏–π –≥–µ–ª—å-–∑–º–∞–∑–∫–∞ Masculan –ó—ñ–≥—Ä—ñ–≤–∞—é—á–∏–π 75 –º–ª (4019042075033)",     "price": 432},
    {"id":"p6",  "name":"–Ü–Ω—Ç–∏–º–Ω–∏–π –≥–µ–ª—å-–∑–º–∞–∑–∫–∞ Masculan –®–æ–≤–∫ 75 –º–ª (4019042075019)",            "price": 408},
    {"id":"p7",  "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Anatomic 10 —à—Ç (4019042000042)",                "price": 288},
    {"id":"p8",  "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Anatomic 3 —à—Ç (4019042000080)",                 "price": 108},
    {"id":"p9",  "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Dotted 10 —à—Ç (4019042000028)",                  "price": 288},
    {"id":"p10", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Dotted 3 —à—Ç (4019042000066)",                   "price": 108},
    {"id":"p11", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Extra Double Protection 10 —à—Ç (4019042010218)","price": 288},
    {"id":"p12", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Extra Double Protection 3 —à—Ç (4019042003210)", "price": 108},
    {"id":"p13", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Extra Long Pleasure 10 —à—Ç (4019042003326)",     "price": 288},
    {"id":"p14", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Extra Long Pleasure 3 —à—Ç (4019042010324)",      "price": 108},
    {"id":"p15", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Frutti Edition 10 —à—Ç (4019042001100)",          "price": 288},
    {"id":"p16", "name":"–ù–∞–±—ñ—Ä –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ñ–≤ Masculan –ö–æ–ª—å–æ—Ä–æ–≤—ñ –∑ –∞—Ä–æ–º–∞—Ç–∞–º–∏ 150 —à—Ç (4019042021504)", "price": 3000},
    {"id":"p17", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Frutti Edition 3 —à—Ç (4019042001032)",           "price": 108},
    {"id":"p18", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Gold 10 —à—Ç (4019042000905)",                    "price": 300},
    {"id":"p19", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Gold 3 —à—Ç (4019042000936)",                     "price": 114},
    {"id":"p20", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Organic 10 —à—Ç (4019042700157)",                 "price": 300},
    {"id":"p21", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Organic 3 —à—Ç (4019042700140)",                  "price": 114},
    {"id":"p22", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Pur 10 —à—Ç (4019042701116)",                     "price": 300},
    {"id":"p23", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Pur 3 —à—Ç (4019042000639)",                      "price": 114},
    {"id":"p24", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Ribbed+Dotted 10 —à—Ç (4019042000035)",           "price": 288},
    {"id":"p25", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Ribbed+Dotted 3 —à—Ç (4019042000073)",            "price": 108},
    {"id":"p26", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Sensitive 10 —à—Ç (4019042000011)",               "price": 288},
    {"id":"p27", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan Sensitive 3 —à—Ç (4019042000059)",                "price": 108},
    {"id":"p28", "name":"–ù–∞–±—ñ—Ä –ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ñ–≤ Masculan Sensitive 150 —à—Ç (4019042011505)",       "price": 3000},
    {"id":"p29", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan XXL 3 —à—Ç (4019042000356)",                      "price": 108},
    {"id":"p30", "name":"–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∏ Masculan XXL 10 —à—Ç (4019042001056)",                     "price": 288},
]

# === –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ===
class Checkout(StatesGroup):
    name = State()
    phone = State()
    address = State()

def catalog_kb():
    kb = InlineKeyboardBuilder()
    for p in PRODUCTS:
        kb.button(text=f"{p['name']} ‚Äî {p['price']}‚Ç¥", callback_data=f"add:{p['id']}")
    kb.button(text="üß∫ –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.adjust(1)
    return kb.as_markup()

def cart_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_catalog")
    kb.adjust(1)
    return kb.as_markup()

def get_cart(data: dict):
    return data.get("cart", {})

def add_to_cart(data: dict, pid: str):
    cart = data.setdefault("cart", {})
    cart[pid] = cart.get(pid, 0) + 1

def cart_text(cart: dict):
    if not cart:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines, total = [], 0
    for pid, qty in cart.items():
        p = next(p for p in PRODUCTS if p["id"] == pid)
        line_sum = p["price"] * qty
        total += line_sum
        lines.append(f"‚Ä¢ {p['name']} √ó {qty} = {line_sum}‚Ç¥")
    lines.append(f"\n–†–∞–∑–æ–º: {total}‚Ç¥")
    return "\n".join(lines)

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∑ –∫–∞—Ç–∞–ª–æ–≥—É:", reply_markup=catalog_kb())

@dp.callback_query(F.data.startswith("add:"))
async def add_item(c: CallbackQuery, state: FSMContext):
    pid = c.data.split(":")[1]
    data = await state.get_data()
    add_to_cart(data, pid)
    await state.set_data(data)
    await c.answer("–î–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    await c.message.edit_text("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ. –©–æ –¥–∞–ª—ñ?", reply_markup=cart_kb())

@dp.callback_query(F.data == "cart")
async def show_cart(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await c.message.edit_text(cart_text(get_cart(data)), reply_markup=cart_kb())

@dp.callback_query(F.data == "back_catalog")
async def back_catalog(c: CallbackQuery):
    await c.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=catalog_kb())

@dp.callback_query(F.data == "checkout")
async def ask_name(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not get_cart(data):
        await c.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    await c.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    await state.set_state(Checkout.name)

@dp.message(Checkout.name)
async def ask_phone(m: Message, state: FSMContext):
    await state.update_data(customer_name=m.text.strip())
    await m.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–∑ –∫–æ–¥–æ–º):")
    await state.set_state(Checkout.phone)

@dp.message(Checkout.phone)
async def ask_address(m: Message, state: FSMContext):
    await state.update_data(customer_phone=m.text.strip())
    await m.answer("–ê–¥—Ä–µ—Å–∞/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(Checkout.address)

@dp.message(Checkout.address)
async def finalize(m: Message, state: FSMContext):
    await state.update_data(customer_address=m.text.strip())
    data = await state.get_data()
    cart = get_cart(data)

    total = 0
    lines = []
    for pid, qty in cart.items():
        p = next(p for p in PRODUCTS if p["id"] == pid)
        line_sum = p["price"] * qty
        total += line_sum
        lines.append(f"{p['name']} √ó {qty} = {line_sum}‚Ç¥")

    order_text = (
        "üÜï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
        + "\n".join(lines)
        + f"\n\n–†–∞–∑–æ–º: {total}‚Ç¥"
        + f"\n\n–ö–ª—ñ—î–Ω—Ç: {data.get('customer_name')}"
        + f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('customer_phone')}"
        + f"\n–ê–¥—Ä–µ—Å–∞: {data.get('customer_address')}"
        + f"\nTG: @{m.from_user.username or m.from_user.id}"
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=order_text)
    await m.answer("–î—è–∫—É—î–º–æ! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è.")
    await state.set_data({})
    await state.clear()

# === FastAPI: webhook + health ===
@app.post("/webhook")
async def telegram_webhook(request: Request, x_telegram_bot_api_secret_token: str = Header(None)):
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ —Å–µ–∫—Ä–µ—Ç—É (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å secret_token –≤ setWebhook)
    if WEBHOOK_SECRET and x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid secret")
    update_data = await request.json()
    update = Update.model_validate(update_data, context={'bot': bot})
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
@app.get("/health")
def health():
    return {"status": "ok"}

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω BASE_URL)
@app.on_event("startup")
async def on_startup():
    if BASE_URL:
        await bot.set_webhook(url=f"{BASE_URL}/webhook", secret_token=WEBHOOK_SECRET)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
